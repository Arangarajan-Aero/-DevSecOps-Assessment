pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'aero1602/api'
        SCANNER_HOME = tool 'sonarqube-01'
        AWS_REGION = 'ap-south-1'
        ECR_REPO_WEB = '836759839628.dkr.ecr.ap-south-1.amazonaws.com'
        ECR_REPO_API = '836759839628.dkr.ecr.ap-south-1.amazonaws.com'
        IMAGE_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT}" // Ensure this is properly set
        DEPLOY_ENV = '' // Variable for deploy environment (dev/prod)
    }
    parameters {
        choice(
            name: 'QualityGate',
            choices: ['Pass', 'Fail'],
            description: 'Select whether to fail the pipeline on quality gate failure'
        )
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs() // Ensure the workspace is cleaned before the build
            }
        }
        stage('Checkout SCM') {
            steps {
                // Check out code from the provided Git repository
                git url: 'https://github.com/Arangarajan-Aero/DevSecOps-Assessment.git', branch: 'develop'
            }
        }

        

        stage('Set Deployment Environment') {
            steps {
                script {
                    // Set the deploy environment based on the branch being built
                    if (env.BRANCH_NAME == 'develop') {
                        env.DEPLOY_ENV = 'dev'
                        echo "Deploying to Dev Environment"
                    } else if (env.BRANCH_NAME == 'master') {
                        env.DEPLOY_ENV = 'prod'
                        echo "Deploying to Prod Environment"
                    } else {
                        error "Unsupported branch. Only 'develop' and 'master' are supported."
                    }
                }
            }
        }

        stage('Static Code Analysis') {
            parallel {
                stage('SonarQube Analysis') {
                    steps {
                        script {
                            def projectName = 'api'
                            def projectKey = 'api'

                            // Run SonarQube analysis with specified project details and branch
                            withSonarQubeEnv('sonar-qube') {
                                def scannerHome = tool name: 'sonarqube-01', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                                sh """
                                    ${scannerHome}/bin/sonar-scanner \
                                    -Dsonar.projectKey=${projectKey} \
                                    -Dsonar.projectName=${projectName} \
                                    -Dsonar.sources=. \
                                    -Dsonar.host.url=${env.SONAR_HOST_URL} \
                                    -Dsonar.qualitygate=80 \
                                    -Dsonar.language=py \
                                    -Dsonar.python.coverage.reportPaths=coverage.xml
                                """
                            }
                        }
                    }
                }

                stage('OWASP Dependency Check') {
                    steps {
                        dependencyCheck additionalArguments: '--scan ./ --format ALL', 
                                        odcInstallation: 'dp-check', 
                                        stopBuild: true  
                        dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                    }
                }
            }
        }

        stage('SonarQube Quality Gate Check') {
            steps {
                script {
                    // Timeout to wait for SonarQube Quality Gate results
                    timeout(time: 10, unit: 'MINUTES') {
                        def qualityGate = waitForQualityGate() // Waits for the quality gate result from SonarQube

                        // Check if the quality gate status is not 'OK' and handle according to the user selection
                        if (params.QualityGate == 'Fail' && qualityGate.status != 'OK') {
                            error "Pipeline failed due to not meeting the quality gate conditions. Status: ${qualityGate.status}"
                        } else {
                            echo "Quality Gate status: ${qualityGate.status} (Expected: OK)"
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                        echo "Starting Docker build"
                        sh "pwd"
                        sh "ls -l"
                        sh "cd api"
                        sh "docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} ./api"
                        echo "Docker Image built successfully:${IMAGE_TAG}"
            }
        }

        // stage('Push API Image to ECR') {
        //     steps {
        //         script {
        //             // Log in to AWS ECR and push the API image for the correct environment
        //             sh """
        //                 aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO_API}
        //                 docker tag ${DEPLOY_ENV}-api:${IMAGE_TAG} ${ECR_REPO_API}/${DEPLOY_ENV}/api:${IMAGE_TAG}
        //                 docker push ${ECR_REPO_API}/${DEPLOY_ENV}/api:${IMAGE_TAG}
        //             """
        //             echo "Docker Image pushed to ECR: ${ECR_REPO_API}/${DEPLOY_ENV}/api:${IMAGE_TAG}"
        //         }
        //     }
        // }
    }
}
