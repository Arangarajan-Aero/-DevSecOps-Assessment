pipeline {
    agent any
    environment {
        AWS_REGION = 'ap-south-1'
        ECR_REPO_WEB = '836759839628.dkr.ecr.ap-south-1.amazonaws.com'
        ECR_REPO_API = '836759839628.dkr.ecr.ap-south-1.amazonaws.com'
        IMAGE_TAG = "${gitCommit}-${BUILD_NUMBER}"
        DEPLOY_ENV = '' // Variable for deploy environment (dev/prod)
    }
    parameters {
        choice(
            name: 'QualityGate',
            choices: ['Pass', 'Fail'],
            description: 'Select whether to fail the pipeline on quality gate failure'
        )
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs() // Ensure the workspace is cleaned before the build
            }
        }

        stage('Set Deployment Environment') {
            steps {
                script {
                    // Set the deploy environment based on the branch being built
                    if (env.BRANCH_NAME == 'develop') {
                        env.DEPLOY_ENV = 'dev'
                        echo "Deploying to Dev Environment"
                    } else if (env.BRANCH_NAME == 'master') {
                        env.DEPLOY_ENV = 'prod'
                        echo "Deploying to Prod Environment"
                    } else {
                        error "Unsupported branch. Only 'develop' and 'master' are supported."
                    }
                }
            }
        }

        stage('Static Code Analysis') {
            parallel {
                stage('SonarQube Analysis') {
                    steps {
                        script {
                            def projectName = 'DevSecOps'
                            def projectKey = 'DevSecOps'
                            
                            // Run SonarQube analysis with specified project details
                            withSonarQubeEnv('sonar-qube') {
                                sh """
                                    $SCANNER_HOME/bin/sonar-scanner \
                                    -Dsonar.projectKey=${projectKey} \
                                    -Dsonar.projectName=${projectName} \
                                    -Dsonar.sources=src \
                                    -Dsonar.host.url=${env.SONAR_HOST_URL} \
                                    -Dsonar.login=${env.SONAR_TOKEN}  // Ensure SonarQube token is configured in environment
                                """
                            }
                        }
                    }
                }

                stage('OWASP Dependency Check') {
                    steps {
                        dependencyCheck additionalArguments: '--scan ./ --format ALL', 
                                        odcInstallation: 'dp-check', 
                                        stopBuild: true  
                        dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                    }
                }
            }
        }

        stage('SonarQube Quality Gate Check') {
            steps {
                script {
                    // Timeout to wait for SonarQube Quality Gate results
                    timeout(time: 10, unit: 'MINUTES') {
                        def qualityGate = waitForQualityGate() // Waits for the quality gate result from SonarQube
                        
                        // Check if the quality gate status is not 'OK' and handle according to the user selection
                        if (params.QualityGate == 'Fail' && qualityGate.status != 'OK') {
                            error "Pipeline failed due to not meeting the quality gate conditions. Status: ${qualityGate.status}"
                        } else {
                            echo "Quality Gate status: ${qualityGate.status} (Expected: OK)"
                        }
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('api') {
                    sh 'python3 test.py' // Run integration tests for the API service
                }
            }
        }

        stage('Build API Image') {
            steps {
                script {
                    dir('api') {
                        // Build API app image for the correct environment
                        sh "docker build -t ${DEPLOY_ENV}-api:${IMAGE_TAG} ."
                    }
                }
            }
        }

        stage('Anchore Image Scan') {
            steps {
                script {
                    // Scan the API image for vulnerabilities
                    sh "anchore scan --output json --image ${DEPLOY_ENV}-api:${IMAGE_TAG} > anchore-scan-api.json"
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'anchore-scan-api.json'
                }
            }
        }

        stage('Push API Image to ECR') {
            steps {
                script {
                    // Log in to AWS ECR and push the API image for the correct environment
                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO_API}"
                    sh "docker tag ${DEPLOY_ENV}-api:${IMAGE_TAG} ${ECR_REPO_API}/${DEPLOY_ENV}/api:${IMAGE_TAG}"
                    sh "docker push ${ECR_REPO_API}/${DEPLOY_ENV}/api:${IMAGE_TAG}"
                }
            }
        }
    }
}
